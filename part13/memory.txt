package main

import (
	"fmt"

	"github.com/DmitriyVTitov/size"
)

type example struct {
	a []int
	b bool
	c int32
	d string
}

func main() {
	ex := example{ // 
		a: []int{1, 2, 3}, // 48 байт всего, 24 байта на пустой массив кортеж из трех значений,
                           // который содержит ссылку на адрес в памяти, длину слайса и емкость слайса, +24 байта по 8 байт на цифру в 64 разрядной системе
		b: true,           // 8 байт, вообще bool 1 байт, но компилятор выравнивает структуры по 8 байтовым границам для оптимизации доступа 
		d: "1234",         // 16 байт на строку, которые содержат указатель на строку и ее длину
	} // ?
	fmt.Println("Размер в байтах для ex:", size.Of(ex))
	// Как получается результат?
    // Результат 76 = 48 + 8 + 16 + 4, где 4 - это выделенный объем на переменную int32

	ex1 := example{
		a: []int{1, 2, 3}, // ? см. выше
		b: true,           // ? см. выше
		d: "1234",         // ? см. выше
		c: 100,            // 4 байта на int32
	} // ?
	fmt.Println("Размер в байтах для ex1:", size.Of(ex1))
	// Как получается результат?
    // Результат также 76 = 48 + 8 + 16 + 4, где 4 - это выделенный объем на переменную int32
}
